/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHouseholdArgs } from "./CreateHouseholdArgs";
import { UpdateHouseholdArgs } from "./UpdateHouseholdArgs";
import { DeleteHouseholdArgs } from "./DeleteHouseholdArgs";
import { HouseholdFindManyArgs } from "./HouseholdFindManyArgs";
import { HouseholdFindUniqueArgs } from "./HouseholdFindUniqueArgs";
import { Household } from "./Household";
import { HouseholdMemberFindManyArgs } from "../../householdMember/base/HouseholdMemberFindManyArgs";
import { HouseholdMember } from "../../householdMember/base/HouseholdMember";
import { HouseholdService } from "../household.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Household)
export class HouseholdResolverBase {
  constructor(
    protected readonly service: HouseholdService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "read",
    possession: "any",
  })
  async _householdsMeta(
    @graphql.Args() args: HouseholdFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Household])
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "read",
    possession: "any",
  })
  async households(
    @graphql.Args() args: HouseholdFindManyArgs
  ): Promise<Household[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Household, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "read",
    possession: "own",
  })
  async household(
    @graphql.Args() args: HouseholdFindUniqueArgs
  ): Promise<Household | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Household)
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "create",
    possession: "any",
  })
  async createHousehold(
    @graphql.Args() args: CreateHouseholdArgs
  ): Promise<Household> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Household)
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "update",
    possession: "any",
  })
  async updateHousehold(
    @graphql.Args() args: UpdateHouseholdArgs
  ): Promise<Household | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Household)
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "delete",
    possession: "any",
  })
  async deleteHousehold(
    @graphql.Args() args: DeleteHouseholdArgs
  ): Promise<Household | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HouseholdMember], { name: "householdMembers" })
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "read",
    possession: "any",
  })
  async resolveFieldHouseholdMembers(
    @graphql.Parent() parent: Household,
    @graphql.Args() args: HouseholdMemberFindManyArgs
  ): Promise<HouseholdMember[]> {
    const results = await this.service.findHouseholdMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
