/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHouseholdMemberArgs } from "./CreateHouseholdMemberArgs";
import { UpdateHouseholdMemberArgs } from "./UpdateHouseholdMemberArgs";
import { DeleteHouseholdMemberArgs } from "./DeleteHouseholdMemberArgs";
import { HouseholdMemberFindManyArgs } from "./HouseholdMemberFindManyArgs";
import { HouseholdMemberFindUniqueArgs } from "./HouseholdMemberFindUniqueArgs";
import { HouseholdMember } from "./HouseholdMember";
import { Household } from "../../household/base/Household";
import { User } from "../../user/base/User";
import { HouseholdMemberService } from "../householdMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HouseholdMember)
export class HouseholdMemberResolverBase {
  constructor(
    protected readonly service: HouseholdMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "read",
    possession: "any",
  })
  async _householdMembersMeta(
    @graphql.Args() args: HouseholdMemberFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HouseholdMember])
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "read",
    possession: "any",
  })
  async householdMembers(
    @graphql.Args() args: HouseholdMemberFindManyArgs
  ): Promise<HouseholdMember[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HouseholdMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "read",
    possession: "own",
  })
  async householdMember(
    @graphql.Args() args: HouseholdMemberFindUniqueArgs
  ): Promise<HouseholdMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HouseholdMember)
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "create",
    possession: "any",
  })
  async createHouseholdMember(
    @graphql.Args() args: CreateHouseholdMemberArgs
  ): Promise<HouseholdMember> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        household: {
          connect: args.data.household,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HouseholdMember)
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "update",
    possession: "any",
  })
  async updateHouseholdMember(
    @graphql.Args() args: UpdateHouseholdMemberArgs
  ): Promise<HouseholdMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          household: {
            connect: args.data.household,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HouseholdMember)
  @nestAccessControl.UseRoles({
    resource: "HouseholdMember",
    action: "delete",
    possession: "any",
  })
  async deleteHouseholdMember(
    @graphql.Args() args: DeleteHouseholdMemberArgs
  ): Promise<HouseholdMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Household, {
    nullable: true,
    name: "household",
  })
  @nestAccessControl.UseRoles({
    resource: "Household",
    action: "read",
    possession: "any",
  })
  async resolveFieldHousehold(
    @graphql.Parent() parent: HouseholdMember
  ): Promise<Household | null> {
    const result = await this.service.getHousehold(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: HouseholdMember
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
